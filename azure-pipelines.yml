# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  name: Mac_Kubernetes_Helm
  demands: Agent.Name -equals Kunal-Jains-MacBook-Pro

steps:
  - script: echo Terraform infrastructure build
    displayName: 'Initializing the Infra'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
  - task: Bash@3
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      script: 'terraform init'
  
  - task: Bash@3
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      script: 'terraform workspace select $(ENVTODEPLOY) || terraform workspace new $(ENVTODEPLOY)'
      
  - script: echo Terraform infrastructure Plan
    displayName: 'Running the Plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    
  - task: Bash@3
    inputs:
      targetType: 'inline'
      workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
      script: 'terraform plan -out=terraform.plan -detailed-exitcode -input=false -no-color | tee terraform-$(ENVTODEPLOY)-plan.txt'
      failOnStderr: true
  
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/terraform/terraform-$(ENVTODEPLOY)-plan.txt'
      ArtifactName: 'terraform-$(ENVTODEPLOY)-plan'
    displayName: 'Archive Terraform Plan Output'
  
  - script: |
      terraform show -json terraform.plan | python3 -m json.tool > terraform_plan.json
    displayName: 'Convert Terraform Plan to JSON'
    
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'terraform_plan.json'
      artifactName: 'terraform-plan-json'
    displayName: 'Archive Terraform Plan JSON'
  
  - script: |
      rm terraform-$(ENVTODEPLOY)-plan.txt
      rm terraform_plan.json
    displayName: 'Clean Up'


